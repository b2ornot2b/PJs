/*** File generated by PJs http://jaredforsyth.com/projects/pjs ***/

// from source file /home/jared/clone/pjs/test/py2js/algorithms/triangulation.py

load("./build/pjslib.js");
var console = {log:function(){print.apply(this, arguments);}};
module('/home/jared/clone/pjs/test/py2js/algorithms/triangulation.py', function (_) {
    _.__doc__ = "";
    _.abs = $def(function $_abs(x) { // 1
        if ($b.bool($b.do_ops(x, '>', 0)) === true) {
            return x;
        } else return -x;
    });
    _.abs.__module__ = _.__name__;
    _.abs.__name__ = $b.str("abs");
    _.sqrt = $def(function $_sqrt(x) { // 7
        var eps = $b._float(0.000000);
        x = $b._float(x);
        var r = $b.div(x, 2);
        var residual = $b.sub($b.pow(r, 2), x);
        while ($b.bool($b.do_ops(_.abs(residual), '>', eps)) === true) {
            var r_d = $b.div(-residual, $b.mult(2, r));
            r = $b.add(r, r_d);
            residual = $b.sub($b.pow(r, 2), x);
        }
        return r;
    });
    _.sqrt.__module__ = _.__name__;
    _.sqrt.__name__ = $b.str("sqrt");
    _.is_on_the_left = $def(function $_is_on_the_left(c, a, b, pts_list) { // 18
        var __pjs_tmp = pts_list.__getitem__(a);
        var ax = __pjs_tmp.__getitem__(0);
        var ay = __pjs_tmp.__getitem__(1);
        var __pjs_tmp = pts_list.__getitem__(b);
        var bx = __pjs_tmp.__getitem__(0);
        var by = __pjs_tmp.__getitem__(1);
        var __pjs_tmp = pts_list.__getitem__(c);
        var cx = __pjs_tmp.__getitem__(0);
        var cy = __pjs_tmp.__getitem__(1);
        var ux = $b._float($b.sub(bx, ax));
        var uy = $b._float($b.sub(by, ay));
        var vx = $b._float($b.sub(cx, ax));
        var vy = $b._float($b.sub(cy, ay));
        return $b.do_ops($b.sub($b.mult(ux, vy), $b.mult(uy, vx)), '>', 0);
    });
    _.is_on_the_left.__module__ = _.__name__;
    _.is_on_the_left.__name__ = $b.str("is_on_the_left");
    _.criterion = $def(function $_criterion(a, b, c, pts_list) { // 28
        var __pjs_tmp = pts_list.__getitem__(a);
        var ax = __pjs_tmp.__getitem__(0);
        var ay = __pjs_tmp.__getitem__(1);
        var __pjs_tmp = pts_list.__getitem__(b);
        var bx = __pjs_tmp.__getitem__(0);
        var by = __pjs_tmp.__getitem__(1);
        var __pjs_tmp = pts_list.__getitem__(c);
        var cx = __pjs_tmp.__getitem__(0);
        var cy = __pjs_tmp.__getitem__(1);
        var ux = $b._float($b.sub(ax, cx));
        var uy = $b._float($b.sub(ay, cy));
        var vx = $b._float($b.sub(bx, cx));
        var vy = $b._float($b.sub(by, cy));
        var len_u = _.sqrt($b.add($b.mult(ux, ux), $b.mult(uy, uy)));
        var len_v = _.sqrt($b.add($b.mult(vx, vx), $b.mult(vy, vy)));
        return $b.div($b.add($b.mult(ux, vx), $b.mult(uy, vy)), $b.mult(len_u, len_v));
    });
    _.criterion.__module__ = _.__name__;
    _.criterion.__name__ = $b.str("criterion");
    _.find_third_point = $def(function $_find_third_point(a, b, pts_list, edges) { // 40
        $b.str('\n' +
        '    Take a boundary edge (a,b), and in the list of points\n' +
        '    find a point \'c\' that lies on the left of ab and maximizes\n' +
        '    the angle acb\n' +
        '    ');
        var found = 0;
        var minimum = $b.pow(10, 8);
        var c_index = -1;
        var pt_index = -1;
        var __pjs_iter0 = $b.foriter(pts_list);
        while (__pjs_iter0.trynext()) {
            var c_point = __pjs_iter0.value;
        
            c_index = $b.add(c_index, 1);
            if ($b.bool($b.bool($b.do_ops(c_index, '!=', a)) && $b.bool($b.do_ops(c_index, '!=', b))) === true) {
                var edge_intersects = $b.bool(_.edge_intersects_edges($b.tuple([a, c_index]), pts_list, edges)) || $b.bool(_.edge_intersects_edges($b.tuple([b, c_index]), pts_list, edges));
                if ($b.bool(!$b.bool(edge_intersects)) === true) {
                    var crit = _.criterion(a, b, c_index, pts_list);
                    if ($b.bool($b.do_ops(crit, '<', minimum)) === true) {
                        minimum = crit;
                        pt_index = c_index;
                        found = 1;
                    }
                }
            }
        }
        if ($b.bool($b.do_ops(found, '==', 0)) === true) {
            $b.raise($b.assertdefined(TriangulationError)($b.str('ERROR: Optimal point not found in find_third_point().')));
        }
        return pt_index;
    });
    _.find_third_point.__module__ = _.__name__;
    _.find_third_point.__name__ = $b.str("find_third_point");
    _.lies_inside = $def(function $_lies_inside(c, bdy_edges) { // 66
        var __pjs_iter0 = $b.foriter(bdy_edges);
        while (__pjs_iter0.trynext()) {
            var edge = __pjs_iter0.value;
        
            var __pjs_tmp = edge;
            var a = __pjs_tmp.__getitem__(0);
            var b = __pjs_tmp.__getitem__(1);
            if ($b.bool($b.bool($b.do_ops(c, '==', a)) || $b.bool($b.do_ops(c, '==', b))) === true) {
                return $b.False;
            }
        }
        return $b.True;
    });
    _.lies_inside.__module__ = _.__name__;
    _.lies_inside.__name__ = $b.str("lies_inside");
    _.is_boundary_edge = $def(function $_is_boundary_edge(a, b, bdy_edges) { // 72
        $b.str('\n' +
        '    Checks whether edge (a, b) is in the list of boundary edges\n' +
        '    ');
        var __pjs_iter0 = $b.foriter(bdy_edges);
        while (__pjs_iter0.trynext()) {
            var edge = __pjs_iter0.value;
        
            var __pjs_tmp = edge;
            var a0 = __pjs_tmp.__getitem__(0);
            var b0 = __pjs_tmp.__getitem__(1);
            if ($b.bool($b.bool($b.do_ops(a, '==', a0)) && $b.bool($b.do_ops(b, '==', b0))) === true) {
                return $b.True;
            }
        }
        return $b.False;
    });
    _.is_boundary_edge.__module__ = _.__name__;
    _.is_boundary_edge.__name__ = $b.str("is_boundary_edge");
    _.triangulate_af = $def(function $_triangulate_af(pts_list, bdy_edges) { // 82
        $b.str('\n' +
        '    Create a triangulation using the advancing front method.\n' +
        '    ');
        var elems = $b.list([]);
        bdy_edges = bdy_edges.__getitem__($b.slice(null, null, 1));
        while ($b.bool($b.do_ops(bdy_edges, '!=', $b.list([]))) === true) {
            var __pjs_tmp = bdy_edges.pop();
            var a = __pjs_tmp.__getitem__(0);
            var b = __pjs_tmp.__getitem__(1);
            var c = _.find_third_point(a, b, pts_list, bdy_edges);
            elems.append($b.tuple([a, b, c]));
            if ($b.bool(_.is_boundary_edge(c, a, bdy_edges)) === true) {
                bdy_edges.remove($b.tuple([c, a]));
            } else bdy_edges.append($b.tuple([a, c]));
            
            if ($b.bool(_.is_boundary_edge(b, c, bdy_edges)) === true) {
                bdy_edges.remove($b.tuple([b, c]));
            } else bdy_edges.append($b.tuple([c, b]));
        }
        return elems;
    });
    _.triangulate_af.__module__ = _.__name__;
    _.triangulate_af.__name__ = $b.str("triangulate_af");
    _.ccw = $def(function $_ccw(A, B, C) { // 105
        return $b.do_ops($b.mult($b.sub(C.__getitem__(1), A.__getitem__(1)), $b.sub(B.__getitem__(0), A.__getitem__(0))), '>', $b.mult($b.sub(B.__getitem__(1), A.__getitem__(1)), $b.sub(C.__getitem__(0), A.__getitem__(0))));
    });
    _.ccw.__module__ = _.__name__;
    _.ccw.__name__ = $b.str("ccw");
    _.intersect = $def(function $_intersect(A, B, C, D) { // 108
        return $b.bool($b.do_ops(_.ccw(A, C, D), '!=', _.ccw(B, C, D))) && $b.bool($b.do_ops(_.ccw(A, B, C), '!=', _.ccw(A, B, D)));
    });
    _.intersect.__module__ = _.__name__;
    _.intersect.__name__ = $b.str("intersect");
    _.two_edges_intersect = $def(function $_two_edges_intersect(nodes, e1, e2) { // 111
        $b.str('\n' +
        '    Checks whether the two edges intersect.\n' +
        '\n' +
        '    It assumes that e1 and e2 are tuples of (a_id, b_id) of ids into the nodes.\n' +
        '    ');
        var A = nodes.__getitem__(e1.__getitem__(0));
        var B = nodes.__getitem__(e1.__getitem__(1));
        var C = nodes.__getitem__(e2.__getitem__(0));
        var D = nodes.__getitem__(e2.__getitem__(1));
        return _.intersect(A, B, C, D);
    });
    _.two_edges_intersect.__module__ = _.__name__;
    _.two_edges_intersect.__name__ = $b.str("two_edges_intersect");
    _.any_edges_intersect = $def(function $_any_edges_intersect(nodes, edges) { // 123
        $b.str('\n' +
        '    Returns True if any two edges intersect.\n' +
        '    ');
        var __pjs_iter0 = $b.foriter($b.range($b.len(edges)));
        while (__pjs_iter0.trynext()) {
            var i = __pjs_iter0.value;
        
            var __pjs_iter1 = $b.foriter($b.range($b.add(i, 1), $b.len(edges)));
            while (__pjs_iter1.trynext()) {
                var j = __pjs_iter1.value;
            
                var e1 = edges.__getitem__(i);
                var e2 = edges.__getitem__(j);
                if ($b.bool($b.bool($b.do_ops(e1.__getitem__(1), '==', e2.__getitem__(0))) || $b.bool($b.do_ops(e1.__getitem__(0), '==', e2.__getitem__(1)))) === true) {
                    continue;
                }
                if ($b.bool(_.two_edges_intersect(nodes, e1, e2)) === true) {
                    return $b.True;
                }
            }
        }
        return $b.False;
    });
    _.any_edges_intersect.__module__ = _.__name__;
    _.any_edges_intersect.__name__ = $b.str("any_edges_intersect");
    _.edge_intersects_edges = $def(function $_edge_intersects_edges(e1, nodes, edges) { // 137
        $b.str('\n' +
        '    Returns True if "e1" intersects any edge from "edges".\n' +
        '    ');
        var __pjs_iter0 = $b.foriter($b.range($b.len(edges)));
        while (__pjs_iter0.trynext()) {
            var i = __pjs_iter0.value;
        
            var e2 = edges.__getitem__(i);
            if ($b.bool($b.bool($b.do_ops(e1.__getitem__(1), '==', e2.__getitem__(0))) || $b.bool($b.do_ops(e1.__getitem__(0), '==', e2.__getitem__(1)))) === true) {
                continue;
            }
            if ($b.bool(_.two_edges_intersect(nodes, e1, e2)) === true) {
                return $b.True;
            }
        }
        return $b.False;
    });
    _.edge_intersects_edges.__module__ = _.__name__;
    _.edge_intersects_edges.__name__ = $b.str("edge_intersects_edges");
    _.example1 = $def(function $_example1() { // 149
        var nodes = $b.list([$b.tuple([0, 0]), $b.tuple([1, 0]), $b.tuple([1, 1]), $b.tuple([0, 1])]);
        var edges = $b.list([$b.tuple([0, 1]), $b.tuple([1, 2]), $b.tuple([2, 3]), $b.tuple([3, 0])]);
        var elems = _.triangulate_af(nodes, edges);
        return $b.tuple([nodes, edges, elems]);
    });
    _.example1.__module__ = _.__name__;
    _.example1.__name__ = $b.str("example1");
    _.example2 = $def(function $_example2() { // 160
        var nodes = $b.list([$b.tuple([0, 0]), $b.tuple([1, 0]), $b.tuple([2, 1]), $b.tuple([2, 2]), $b.tuple([1, 2]), $b.tuple([$b._float(0.500000), $b._float(1.500000)]), $b.tuple([0, 1])]);
        var edges = $b.list([$b.tuple([0, 1]), $b.tuple([1, 2]), $b.tuple([2, 3]), $b.tuple([3, 4]), $b.tuple([4, 5]), $b.tuple([5, 0])]);
        var elems = _.triangulate_af(nodes, edges);
        return $b.tuple([nodes, edges, elems]);
    });
    _.example2.__module__ = _.__name__;
    _.example2.__name__ = $b.str("example2");
    var __pjs_tmp = _.example1();
    _.nodes = __pjs_tmp.__getitem__(0);
    _.edges = __pjs_tmp.__getitem__(1);
    _.elems = __pjs_tmp.__getitem__(2);
    $b.print(_.nodes);//, true
    $b.print(_.edges);//, true
    $b.print(_.elems);//, true
    if ($b.bool(!$b.bool(_.any_edges_intersect(_.nodes, _.edges))) === true) {
        $b.print($b.str('ok'));//, true
    }
    $b.print();//, true
    var __pjs_tmp = _.example2();
    _.nodes = __pjs_tmp.__getitem__(0);
    _.edges = __pjs_tmp.__getitem__(1);
    _.elems = __pjs_tmp.__getitem__(2);
    $b.print(_.nodes);//, true
    $b.print(_.edges);//, true
    $b.print(_.elems);//, true
    if ($b.bool(!$b.bool(_.any_edges_intersect(_.nodes, _.edges))) === true) {
        $b.print($b.str('ok'));//, true
    }
});

__builtins__.__import__('sys').argv = __builtins__.list(arguments);
__builtins__.run_main('/home/jared/clone/pjs/test/py2js/algorithms/triangulation.py', ['/home/jared/clone/pjs', '/home/jared/clone/pjs', '/home/jared/python', '/usr/lib/python2.6', '/usr/lib/python2.6/plat-linux2', '/usr/lib/python2.6/lib-tk', '/usr/lib/python2.6/lib-old', '/usr/lib/python2.6/lib-dynload', '/usr/lib/python2.6/dist-packages', '/usr/lib/python2.6/dist-packages/PIL', '/usr/lib/python2.6/dist-packages/gst-0.10', '/usr/lib/pymodules/python2.6', '/usr/lib/python2.6/dist-packages/gtk-2.0', '/usr/lib/pymodules/python2.6/gtk-2.0', '/usr/local/lib/python2.6/dist-packages']);

